<?php
/*
 * 
*/


/* -----------------
 * Controller
 * */
<?php

class TripsController extends RetailProtectedController
{
    const GRID_CSS = 'css/trips_grid.css';

    public function actionIndex()
    {
        //css,js
        if(! Yii::app()->request->isAjaxRequest) {
            Yii::app()->clientScript->registerCssFile('css/datetimepicker.min.css');
            Yii::app()->clientScript->registerScriptFile('js/datetimepicker.full.min.js');
        }

        //передаем данные в view, по умочанию value указываем как массив, т.к. необходимо чтоб key был равен имени файла.
        //передача в search role пользователя, т.к. нужно для методов модели.
        if(Yii::app()->user->isSecretary()) {
            $this->renderText($this->renderArray([
                '_index_trips_head' => [],
                '_index_secretary_today' => ['dataProvider' => Trips::model()->searchTodayTrips() ],
                '_index_secretary_feature' => ['dataProvider' => Trips::model()->searchFeauteTrips() ],
                '_index_secretary_executed' => ['dataProvider' => Trips::model()->searchExecutedTrips(Trips::TRIP_SECRETARY) ],
                '_odometr_script_js'  => []
            ]));
        } else {
            $this->renderText($this->renderArray([
                '_index_trips_head' => [],
                '_index_author_active' => ['dataProvider' => Trips::model()->searchActiveTrips() ],
                '_index_author_executed' => ['dataProvider' =>  Trips::model()->searchExecutedTrips() ],
            ]));
        }
    }
    //Передача вложенного массива, где каждый массив:
    // key = имя файла,
    // значение массива - массив данных для view
    public function renderArray($fileNames) {
        $result = '';

        foreach($fileNames as $fileName => $arrayValues)
            $result .= $this->renderPartial($fileName, ['data' => $arrayValues], TRUE);
        return $result;
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'index' page.
     */
    public function actionCreateAndUpdate($id=0)
    {
        //если id указан, значит редактирование поездки, загрузка модели по id, если не указан, загрузка пустой модели и указываем приоритет '', т.к. по умолчанию 1
        if($id) {
            $model = $this->loadModel( (int)$id );
        } else {
            $model = new Trips;
        }

        if(!empty($_POST['Trips'])) {

            //Если это не новая запись и если не достаточно прав, выбрасываем исключение
            if(!$model->isNewRecord && (!$model->isAuthor() || !Yii::app()->request->isAjaxRequest || !$model->isNewTrip()))
                throw new CHttpException(404,'Недостаточно прав для доступа');

            $model->attributes=$_POST['Trips'];
            $model->sellers_id = Yii::app()->user->getSellerId( ! Yii::app()->user->isSeller( Yii::app()->user->id) );

            $model->date = (new Deka\DateTime($model->date))->formatDBDateTime();

            if($model->save()) {
                echo json_encode(['status' => 200]);
                return;
            } else {
                //Если ошибка, записываем в буфер.
                echo json_encode(['status' => 400, 'error' => current( current( $model->getErrors() ) ) ]);
                return;
            }
        } else {
            echo json_encode( [ 'status' => 200, 'html' => $this->renderPartial('create',['model'=>$model], TRUE) ] );
        }
    }

    public function actionUpdateSecretary($id) {
        if( !Yii::app()->user->isSecretary() || !Yii::app()->request->isAjaxRequest)
            throw new CHttpException(404,'Указанная поездка не найдена или недостаточно прав для доступа');

        $trip = $this->loadModel( (int)$id );
        $trip->scenario = 'update_secretary';

        if( !( $trip->isNewTrip() || $trip->isActiveTrip()) )
            throw new CHttpException(404, 'Недостаточно прав для доступа');

        if(!empty($_POST['Trips'])) {
            $trip->attributes = $_POST['Trips'];

            $trip->date = (new Deka\DateTime($trip->date))->formatDBDateTime();

            $trip->execution_date = (new Deka\DateTime($trip->execution_date))->formatDBDateTime();

            //если указанны дата и id водителя, статус "Активный"
            if($trip->execution_date && $trip->driver_id)
                $trip->status = Trips::TRIP_ACTIVE;

            if( $trip->save() ) {
                echo json_encode(['status' => 200]);
                return;
            } else {
                //Если ошибка.
                echo json_encode(['status' => 400, 'error' => current( current( $trip->getErrors() ) ) ]);
                return;
            }
        } else {
            //форма
            echo json_encode( [ 'html' => $this->renderPartial('update_secretary',['trip' => $trip], TRUE) ] );
        }
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDeleteTrip($id)
    {
        $trip = $this->loadModel( (int) $id );
        //поездка найденна и пользователь - водитель поездки., заявка - новая
        if (!$trip->isAuthor() || !Yii::app()->request->isAjaxRequest || !$trip->isNewTrip())
            throw new CHttpException(404, 'Недостаточно прав для доступа');
        $trip->delete();
    }
    public function actionEndTrip($id) {

        $trip = $this->loadModel( (int) $id );
        $trip->scenario = 'end_trip';

        //Пользователь - водитель поездки. Статус поездки: активная, выполненная, завершенная(данные не корректны)
        if( !$trip->isDriver() || !Yii::app()->request->isAjaxRequest || !($trip->isActiveTrip() || $trip->isExecutedTrip() || $trip->isUnconfirmedTrip()) )
            throw new CHttpException(404,'Недостаточно прав для доступа');

        //Значение должно быть не меньше минимального для данного авто и дата выполнения должна быть меньше чем дата выполнения данной поездки
        if(!empty($_POST['Trips'])) {

            if($_POST['Trips']['speedometer_start'] > $_POST['Trips']['speedometer_end']) {
                echo json_encode(['status' => 400, 'error' => 'Значение одометра в конце позедки, меньше значения в начале поездки.' ]);
                return;
            }

            $trip->attributes = $_POST['Trips'];
            //текущая дата и время
            $trip->time_end_trip = new CDbExpression('NOW()');
            $trip->status = Trips::TRIP_EXECUTED;

            if( $trip->save() ) {
                echo json_encode(['status' => 200]);
                return;
            } else {
                //Если ошибка, записываем в буфер.
                echo json_encode(['status' => 400, 'error' => current( current( $trip->getErrors() ) ) ]);
                return;
            }
        } else {
            //если данные не указанны
            if( !isset($trip->speedometer_start) )
                $trip->speedometer_start = $trip->getMaxToCarSpeedometrValue();
            //форма
            echo json_encode( [ 'html' => $this->renderPartial('end_trip',['trip' => $trip], TRUE) ] );
        }
    }

    //значение right = одометр подтвержден
    //значение wrong - одометр не подтвержден
    public function actionConfirmationOdometr($id, $is_confirmed) {

        $trip = $this->loadModel( (int) $id );
        //может отправялть запрос если заявка выполенная или выполненная(не подтвержденная)
        if( !Yii::app()->user->isSecretary() || !Yii::app()->request->isAjaxRequest || !( $trip->isExecutedTrip() || $trip->isUnconfirmedTrip() ))
            throw new CException('Недостаточно прав');

        $trip->status = $is_confirmed == 'right' ? Trips::TRIP_CONFIRMED : Trips::TRIP_UNCOMFIRMED;

        if( ! ($trip->save() && $trip->addAutoTracking()) )
            echo current( current( $trip->getErrors() ) );
    }

    //autocomplite
    public function actionGetPlaces($term) {
        if(!Yii::app()->request->isAjaxRequest)
            throw new CException('Попытка прямого доступа');

        $places = Yii::app()->db->createCommand()
            ->selectDistinct('place')
            ->from('trips')
            ->where('place LIKE :place AND sellers_id = :sellers_id',
                [':place' => '%'.CHtml::encode( $term ).'%', ':sellers_id' => Yii::app()->user->getSellerId( ! Yii::app()->user->isSeller() )])
            ->queryColumn();

        echo CJSON::encode($places);
    }

    //autocomplite
    public function actionGetTargets($term) {
        if(!Yii::app()->request->isAjaxRequest)
            throw new CException('Попытка прямого доступа');

        $targets = Yii::app()->db->createCommand()
            ->selectDistinct('target')
            ->from('trips')
            ->where('target LIKE :target AND sellers_id = :sellers_id',
                [':target' => '%'.CHtml::encode($term).'%', ':sellers_id' => Yii::app()->user->getSellerId( ! Yii::app()->user->isSeller() )])
            ->queryColumn();

        echo CJSON::encode($targets);
    }


    public function getGridView($dataProvider, $columns, $rowCssClassExpression='', $emptyText = 'Поездки не найденны', $cssClass='') {
        return $this->widget('zii.widgets.grid.CGridView', [
            'dataProvider'=>$dataProvider,
            'columns'=>$columns,
            'rowCssClassExpression' => $rowCssClassExpression,
            'emptyText' => $emptyText,
            'htmlOptions' => ['class' => 'grid-view trip_table '.$cssClass],
            'cssFile' => Yii::app()->request->baseUrl.'/'.self::GRID_CSS,
        ]);
    }

    /**
     * Returns the data model based on the  rimary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Trips the loaded model
     * @throws CHttpException
     */

    public function loadModel($id)
    {
        $model=Trips::model()->findByPk($id);

        if($model===null)
            throw new CHttpException(404,'The requested page does not exist.');
        return $model;
    }
}


/* -----------------
 * Model
 * */

/**
 * This is the model class for table "trips".
 *
 * The followings are the available columns in table 'trips':
 * @property string $id
 * @property string $date
 * @property string $sellers_id
 * @property string $place
 * @property string $priority
 * @property string $target
 * @property string $status
 * @property string $execution_date
 * @property string $driver_id
 * @property string $car_id
 * @property string $speedometer_start
 * @property string $speedometer_end
 * @property string $time_start_trip
 * @property string $time_end_trip
 * @property string $consumption_liters
 */
class Trips extends CActiveRecord
{
    const TRIP_NEW = 1;
    const TRIP_ACTIVE = 2;
    const TRIP_EXECUTED = 3;
    const TRIP_CONFIRMED = 4; //подтвержденная
    const TRIP_UNCOMFIRMED = 5; //не подтвержденная

    const PRIORITY_IMPORTANTLY = 'rgba(0, 237, 92, 0.54)'; //приоритет важный

    const TRIP_USER = 'user';
    const TRIP_SECRETARY = 'secretary';

    //по умолчанию
    public $priority = 0;

    protected $trips_on_page = 20;

    public function relations()
    {
        return [
            //поле sellers_id связывается с sellers.id
            'seller'=>[self::HAS_ONE, 'SellersModel', ['id' => 'sellers_id']],
            'driver'=>[self::HAS_ONE, 'SellersModel', ['id' => 'driver_id']],
            'car'=>[self::HAS_ONE, 'AutoCars', ['id' => 'car_id']],
            'trip_status'=>[self::HAS_ONE, 'TripsStatus', ['id' => 'status']],
        ];
    }
    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return Trips the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'trips';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        return [
            ['date, sellers_id, place, priority', 'required'],
            ['priority', 'in', 'range'=>[0,1]],
            ['date, place, target', 'filter', 'filter' => 'htmlspecialchars'],
            ['date, place, target', 'filter', 'filter' => 'trim'],
            ['sellers_id, priority, status, driver_id, car_id, speedometer_start, speedometer_end, consumption_liters', 'numerical', 'integerOnly'=>true],
            ['consumption_liters', 'length', 'max'=>4],
            ['date, execution_date, driver_id, car_id', 'required', 'on' => 'update_secretary'],
            ['speedometer_start, speedometer_end, consumption_liters', 'required', 'on' => 'end_trip'],
            ['sellers_id', 'exist', 'attributeName' => 'id', 'className' => 'SellersModel'],
            ['driver_id', 'exist', 'allowEmpty' => true, 'attributeName' => 'id', 'className' => 'SellersModel'],
            ['car_id', 'exist', 'attributeName' => 'id', 'className' => 'AutoCars', 'on' => 'update_secretary'],
            ['status', 'exist', 'attributeName' => 'id', 'className' => 'TripsStatus'],
        ];
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return [
            'id' => '№',
            'date' => 'Желаемая дата поездки',
            'sellers_id' => 'id заявителя',
            'place' => 'Пункт назначения',
            'priority' => 'Обязательно(высокий приоритет)',
            'target' => 'Цель',
            'status' => 'Статус',
            'execution_date' => 'Дата выполнения',
            'driver_id' => 'Водитель',
            'car_id' => 'Авто',
            'speedometer_start' => 'Одометр в начале',
            'speedometer_end' => 'Одометр в конце',
            'time_end_trip' => 'Дата окончания поездки',
            'consumption_liters' => 'Расход бензина(литров)',
            'car.model' => 'Авто',
            'seller.lastname' => 'Автор',
        ];
    }

    //максимальное значение одомоетра для автомобля.
    public function getMaxToCarSpeedometrValue() {

        return Yii::app()->db->createCommand()
            ->select('MAX(speedometer_end) as speedometer_end')
            ->from('trips')
            ->where('car_id = :car_id',
                [':car_id' => $this->car_id])
            ->queryScalar();
    }

    public function isNewTrip() {
        return Trips::TRIP_NEW == $this->status;
    }
    public function isActiveTrip() {
        return Trips::TRIP_ACTIVE == $this->status;
    }
    public function isExecutedTrip() {
        return Trips::TRIP_EXECUTED == $this->status;
    }
    public function isConfirmedTrip() {
        return Trips::TRIP_CONFIRMED == $this->status;
    }
    public function isUnconfirmedTrip() {
        return Trips::TRIP_UNCOMFIRMED == $this->status;
    }



    //будующие поездки
    public function searchFeauteTrips() {
        return $this->getDataOfDataprovider([
            'condition' => 'DATE(t.date) > CURDATE()'
        ]);
    }

    //активные поездки(пользователя)
    public function searchActiveTrips() {
        return $this->getDataOfDataprovider([
            'params' => [':userId' => Yii::app()->user->getSellerId( ! Yii::app()->user->isSeller() )],
            'condition' => '(sellers_id = :userId OR driver_id = :userId) AND t.status IN('.Trips::TRIP_NEW.','.Trips::TRIP_ACTIVE.','.Trips::TRIP_EXECUTED.','.Trips::TRIP_UNCOMFIRMED.')'
        ]);
    }

    //выполенные поздки(пользователя и секретаря)
    public function searchExecutedTrips($userRole='') {
        $criteria = new CDbCriteria();
        if ($userRole == Trips::TRIP_SECRETARY) {
            $criteria->condition = 't.status IN('.Trips::TRIP_CONFIRMED.')';
        } else {
            $criteria->params = [':userId' => Yii::app()->user->getSellerId(!Yii::app()->user->isSeller())];
            $criteria->condition = '(sellers_id = :userId OR driver_id = :userId) AND t.status IN(' . Trips::TRIP_CONFIRMED.')';
        }
        return $this->getDataOfDataprovider($criteria);
    }

    //Проверяет является ли текущий водитель, воделем выбранной поездки
    public function isDriver() {
        return $this->driver_id == Yii::app()->user->getSellerId( ! Yii::app()->user->isSeller() );
    }
    public function isAuthor() {
        return $this->sellers_id == Yii::app()->user->getSellerId( ! Yii::app()->user->isSeller() );
    }

    //вместо after find, т.к. при использовании after find по умолчанию в модель загружались не корректные данные даты при создании/редактировании.
    public function getDisplayDate() {
        return (new DateTime($this->date))->format('d-m-Y H:i');
    }
    public function getDisplayExecutionDate() {
        return !empty($this->execution_date) ? (new DateTime($this->execution_date))->format('H:i') : '';
    }
    public function getDisplayTimeEndTrip() {
        return !empty($this->time_end_trip) ? (new DateTime($this->time_end_trip))->format('d-m-Y H:i') : '';
    }

    public function getUpdateAuthorLink() {
        return CHtml::link("", Yii::app()->createUrl("trips/createAndUpdate",[ "id" => $this->id ]), [ "class" => "trips_link update_trip_link controll_icon_edit", "data-title" => "Редактировать"]);
    }
    public function getDeleteLink() {
        return CHtml::link("", Yii::app()->createUrl("trips/deleteTrip", [ "id" => $this->id ]), [ "class" => "btn-delete delete_trip_link controll_icon_delete"]);
    }
    public function getEndTripLink() {
        return CHtml::link("", Yii::app()->createUrl("trips/endTrip",[ "id" => $this->id ]),[ "class" => "trips_link trip_trip_link controll_icon_trip", "data-title" => "Редактировать"]);
    }
    public function getUpdateSecretaryLink() {
        return CHtml::link("", Yii::app()->createUrl("trips/updateSecretary",[ "id" => $this->id ]),[ "class" => "trips_link controll_button_icon controll_icon_affirmation", "data-title" => "Редактировать"]);
    }
    public function getOdometrRightLink() {
        return CHtml::link("+", Yii::app()->createUrl("trips/confirmationOdometr", [ "id" => $this->id, "is_confirmed" => "right" ]), [ "class" => "odometr_right"]);
    }
    public function getOdometrWrongLink() {
        return CHtml::link("-", Yii::app()->createUrl("trips/confirmationOdometr", [ "id" => $this->id, "is_confirmed" => "wrong" ]), [ "class" => "odomet_wrong"]);
    }

    //Добавляет данные в таблицу auto_tracking. В случае успеха возвращает boolean.
    public function addAutoTracking() {
        $q = "INSERT INTO auto_tracking (car_id, driver, ondate, km_start, km_stop, fuel_rate, description, date_add ) 
                VALUES (:car_id, :driver_id, :ondate, :km_start, :km_stop, :fuel_rate, :description, now())";
        $command = Yii::app()->db->createCommand($q);

        $command->bindValues([
            ':car_id' => $this->car_id,
            ':driver_id' => $this->driver_id,
            ':ondate' => $this->execution_date,
            ':km_start' => $this->speedometer_start,
            ':km_stop' => $this->speedometer_end,
            ':fuel_rate' => $this->consumption_liters,
            ':description' => 'Пункт назначения: '.$this->place.'. Цель: '.$this->target
        ]);

        if( $command->execute() )
            return true;
        return false;
    }

    protected function getDataOfDataprovider($criteria) {
        return new CActiveDataProvider('Trips',[
            'criteria'=>$criteria,
            'pagination' => [
                'pageSize' => $this->trips_on_page
            ],
            'sort'=>[
                'attributes' => [
                    'id',
                    'place',
                    'target',
                    'execution_date',
                    'speedometer_start',
                    'speedometer_end',
                    'time_start_trip',
                    'time_end_trip',
                    'date'=>[
                        'asc' => 'date ASC',
                        'desc' => 'date DESC',
                    ],
                ],
                'defaultOrder'=>[
                    'date'=>'DESC',
                ]
            ],
        ]);
    }
}


/* -----------------
 * Model
 * */
<?php

/**
 * This is the model class for table "trips".
 *
 * The followings are the available columns in table 'trips':
 * @property string $id
 * @property string $name
 */
class TripsPriority extends CActiveRecord
{

    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return Trips the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'trips_priority';
    }
}

/* -----------------
 * Model
 * */
<?php

/**
 * This is the model class for table "trips".
 *
 * The followings are the available columns in table 'trips':
 * @property string $id
 * @property string $name
 */
class TripsStatus extends CActiveRecord
{

    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return Trips the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'trips_status';
    }
}

/* -----------------
 * View. CreateAndUpdate
 * */
<div class="form">
	<div class="form_error"></div>
	<?php $form=$this->beginWidget('CActiveForm', [
    'id'=>'trips-form',
    'htmlOptions'=>[
        'class'=>'create_form',
    ],
    'enableAjaxValidation'=>false,
]); ?>
	<?php echo $form->errorSummary($model); ?>
    <fieldset>
        <legend>Новая поездка</legend>
        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($model,'date'); ?>
            </div>
            <?php echo $form->textField($model,'date', ['id' => 'datetimepicker', 'value' => (new DateTime($model->date))->format('d-m-Y H:i')] ); ?>
            <?php echo $form->error($model,'date'); ?>
        </div>
        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($model,'place'); ?>
            </div>
            <?php echo $form->textField($model,'place',['size'=>60,'maxlength'=>70, 'autofocus' => 'autofocus', 'class' => 'input_palce']); ?>
            <?php echo $form->error($model,'place'); ?>
        </div>

        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($model,'priority'); ?>
            </div>
            <?php
            echo $form->checkBox($model,'priority');
            echo $form->error($model,'target');
            ?>
        </div>
        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($model,'target'); ?>
            </div>
            <?php echo $form->textField($model,'target',['size'=>60,'maxlength'=>70, 'class' => 'input_target']); ?>
            <?php echo $form->error($model,'target'); ?>
        </div>
    </fieldset>

    <div class="row buttons trips_submit">
        <?php echo CHtml::submitButton($model->isNewRecord ? 'Добавить' : 'Обновить', ['class' => 'trips_submit_button']); ?>
    </div>
<?php $this->endWidget(); ?>
    </div><!-- form -->

<?php echo $this->renderPartial('_form_js'); ?>


/* -----------------
* View. Index
* */
<?php
$columns = [
    [
        'name' => '№',
        'type' => 'raw',
        'value' => '$row+1+$this->grid->dataProvider->getPagination()->offset',
    ],
    [
        'name' => 'date',
        'type' => 'raw',
        'value' => '$data->getDisplayDate()',
        'sortable' => true
    ],
    //если не автор, скрыто.
    [
        'name' => 'Автор заявки',
        'type' => 'raw',
        'value' => '$data->isAuthor() ? $data->seller->lastname : ""',
    ],
    'place',
    'target',
    [
        'name' => 'Водитель',
        'type' => 'raw',
        'value' => '!empty($data->driver->lastname) ? $data->driver->lastname : ""',
    ],
    [
        'name' => 'Дата выполнения',
        'type' => 'raw',
        'value' => '$data->getDisplayExecutionDate()',
    ],
    [
        'name' => 'Авто',
        'type' => 'raw',
        'value' => '!empty($data->car->model) ? $data->car->model : ""',
    ],
    [
        'name' => 'Дата окончания поездки',
        'type' => 'raw',
        'value' => '$data->isDriver() ? $data->getDisplayTimeEndTrip() : ""',
    ],
    [
        'name' => 'Одометр в начале поездки',
        'type' => 'raw',
        'value' => '$data->isDriver() ? $data->speedometer_start : ""',
    ],
    [
        'name' => 'Одометр в конце поездки',
        'type' => 'raw',
        'value' => '$data->isDriver() ? $data->speedometer_end : ""',
    ],
    [
        'name' => 'Расход бензина(литров)',
        'type' => 'raw',
        'value' => '$data->isDriver() && !empty($data->consumption_liters) ? $data->consumption_liters : ""',
    ],
    [
        'name' => '',
        'type' => 'raw',
        'value' => '
            "<div class=\"td_icons_wrap\">" .
            ($data->isNewTrip() ? $data->getUpdateAuthorLink() : "" ) .
            ($data->isDriver() && ($data->isActiveTrip() || $data->isExecutedTrip()) ? $data->getEndTripLink() : "" ) .
            ($data->isNewTrip() ? $data->getDeleteLink() : "" ) .
            ($data->isDriver() && $data->isUnconfirmedTrip() ? $data->getEndTripLink() : "" ) .
            "</div>"',
        'cssClassExpression'=>'"td_icons"',
    ]
];
?>
    <div class="active_trips_title trips_title">Активные поездки:</div>
<?php
//добавление статуса. Если приоритет указан и это новая заявка, добавле соотвествующдего цвета для приоритета, в другом случае, цвет для статуса
$this->getGridView($data['dataProvider'], $columns, '($data->isNewTrip() && $data->priority) ? "priority_important" : "status" . $data->status', 'Вы не добавили поездок');





-------------------------------------------------
//View update

<div class="autor_application">Автор заявки: <?php echo $trip->seller->lastname ?></div>

<div class="form trip_form">
    <?php
    $form=$this->beginWidget('CActiveForm', [
        'id'=>'trips-form',
        'enableAjaxValidation'=>false,
        'htmlOptions'=>[
            'class'=>'update_trip_form',
        ],
    ]);
    echo $form->errorSummary($trip);
    ?>
    <fieldset>
        <legend>Поездка</legend>
        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($trip, 'date'); ?>
            </div>
            <?php echo $form->textField($trip, 'date', ['id' => 'datetimepicker', 'value' => date('d-m-Y H:i', strtotime($trip->date) )] ); ?>
            <?php echo $form->error($trip, 'date'); ?>
        </div>
        <div class="row">
            <div class="trip_label">
                <span class="label_text"><?php echo Trips::model()->getAttributeLabel('place') . ':</span> ' . $trip->place ?>
            </div>
        </div>

        <div class="row">
            <div class="trip_label">
                <span class="label_text"><?php $trip->priority ? 'Приоритет:</span> Очень высокий ' : '' ?>
            </div>
        </div>

        <div class="row">
            <div class="trip_label">
                <span class="label_text"><?php echo Trips::model()->getAttributeLabel('target') . ':</span> ' . $trip->target ?>
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>Информация о поездке</legend>
        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($trip, 'execution_date'); ?>
            </div>
            <?php
            echo $form->textField($trip,'execution_date', ['id' => 'datetimepicker2', 'value' => !empty($trip->execution_date) ? (new DateTime($trip->execution_date))->format('d-m-Y H:i') : (new DateTime($trip->date))->format('d-m-Y H:i')]);
            ?>
            <?php echo $form->error($trip, 'execution_date'); ?>
        </div>

        <div class="row">
            <div class="trip_label">
                <?php echo $form->label($trip, 'driver_id'); ?>
            </div>
            <?php echo $form->dropDownList($trip,'driver_id', CHtml::listData(SellersModel::model()->findAll( ['condition'=>'t.div_id IS NOT NULL', 'order'=>'t.lastname'] ), 'id', 'lastname')); ?>
            <?php echo $form->error($trip, 'driver_id'); ?>
        </div>

        <div class="row">
            <div class="trip_label">
                <?php echo $form->labelEx($trip, 'car_id'); ?>
            </div>
            <?php echo $form->dropDownList($trip, 'car_id', CHtml::listData(AutoCars::model()->findAll(), 'id', 'model'), ['autofocus' => 'autofocus']); ?>
            <?php echo $form->error($trip, 'car_id'); ?>
        </div>
    </fieldset>
    <div class="clearfix"></div>
    <div class="row buttons trips_submit">
        <?php echo CHtml::submitButton('Утвердить', ['class' => 'trips_submit_button']); ?>
    </div>
    <?php
    $this->endWidget();
    ?>
</div><!-- form -->

<?php echo $this->renderPartial('_form_js'); ?>

-------------------------------------------------
//style

.grid-view table.items{
    margin: 0;
    width:100%;
}
.grid-view table.items tr{
    text-align: center;
}

.grid-view table.items tr.odd {
    background: #FFFFFF;
}
.grid-view table.items tr.over{
    background: #dfffdf;
}
.grid-view table.items tr.cancel{
    background: #FFdfdf;
}
.grid-view caption {
    width:100%;
    background-color: #eeecec;
    font-weight: bold;
    font-size: 130%;
    text-align: left;
    border: 1px solid #aaa;
    border-bottom: none;
    padding: 5px 0px 0px 20px;
}
a.sort-link {
    color:black;
}
.grid-view table.items tr.filters{
    background-color: #EEEEEE;
    text-align: center;

}
.grid-view {
    padding-top: 25px;
}
.grid-view-loading {
    background: url(../images/loading.gif) no-repeat;
    padding-top:25px;
}
.grid-view  table.items caption {
    background-color: #eeecec;
    font-weight: bold;
    font-size: 130%;
    text-align: left;
    border: 1px solid #aaa;
    border-bottom: none;
    padding: 5px 0px 0px 20px;
}


.grid-view table.items tbody tr:hover {
    background-color: #ddd;
}

.grid-view table.items thead,.grid-view table.items tfoot,.grid-view table.items th {
    background-color: #ddd;
    font-weight: bold;
}

.grid-view table.items th {
    text-align: center;
}

.grid-view table.items td,.grid-view table.items th {
    border: 1px solid #aaa;
    padding: 2px 5px;
}

.grid-view table.items tbody th {
    text-align: left;
}

.grid-view table.items tr.divider,.grid-view table.items tr.divider:HOVER {
    background-color: #afafaf;
    font-weight: bold;
}


----------------------------------------------------
//index head

<script>
$(function() {
    var urlToUpdate;
    $('body').on('click', '.trips_link', function(event) {
        event.preventDefault();
        urlToUpdate = $(event.target).attr('href');
        var title = $(event.target).data('title');
        $.ajax({
            url: urlToUpdate,
            type: "GET",
            dataType: 'json',
            success: function(data){
                addForm(data.html, $('#form_trip'), title);
            },
            beforeSend: function(){
                $('.submit_button').attr('disabled', 'disabled');
                deka.showMessage('Загрузка формы.');
            },
            error: function(){
                $('.submit_button').attr('disabled', '');
                deka.showError('Произошла ошибка.');
            }
        });
    });
    $('#form_trip').click(function(event) {
        if ($(event.target).hasClass('trips_submit_button')) {
            event.preventDefault();
            $.ajax({
                url: urlToUpdate,
                type: "POST",
                dataType: 'json',
                data: $('#trips-form').serialize(),
                success: function(data){
                    if(data.status == 200) {
                        deka.showSuccess('Отправленно.');
                        window.location.reload();
                    } else {
                        deka.showError('Произошла ошибка.' + '<br>' + data.error);
                        $(event.target).removeAttr('disabled');
                    }
                },
                beforeSend: function(){
                    $(event.target).attr('disabled', 'disabled');
                    deka.showMessage('Загрузка формы.');
                },
                error: function(data){
                    $(event.target).removeAttr('disabled');
                    deka.showError('Произошла ошибка.');
                }
            });
        }
    });

    //принимает html и jquery элемент к которому нужно присоеденить html
    function addForm(html, $form_container, title) {
        $form_container.html(html);
        $form_container.dialog({
            modal: true,
            resizable: false,
            title: title,
            width: 1200,
            closeText: 'Закрыть',
            dialogClass: 'trips_dialog'
        });
    }

    $(function() {
        $('.delete_trip_link').click(function(event) {
            event.preventDefault();
            $.ajax({
                url: $(this).attr('href'),
                type: "GET",
                success: function(data){
                    if(!data) {
                        $(event.target).closest('tr').hide('slow');
                        deka.showSuccess('Поездка удалена.');
                    } else {
                        deka.showError('Произошла ошибка. ' + '<br>' + data);
                    }
                },
                beforeSend: function(){
                    deka.showMessage('Идет удаление');
                },
                error: function(data){
                    deka.showError('Произошла ошибка.');
                }
            });
        });
    });

    $('.executed_trips_title').click(function() {
        $('.executed_trips').slideToggle();
    });
});
</script>

<button href="<?= Yii::app()->createUrl('trips/createAndUpdate'); ?>" id="create_trip_link" class="trips_link" data-title="Заказать поездку">Заказать поездку</button>

<div id="form_trip"></div>

<?php
/*legend*/
$statuses = TripsStatus::model()->findAll();
?>
<style>
    <?php
    foreach($statuses as $status) {
        echo '.status' . $status->id . ' { background-color: ' . $status->color . '; } ';
    }
        echo '.priority_important' . ' { background-color: ' . Trips::PRIORITY_IMPORTANTLY . '; } ';
    ?>
</style>
<div class="legend">
    <?php
    $i=1;

    foreach($statuses as $status) {
        ?>
        <div class="legend_block">
            <div class="legend_block_color <?php echo 'status' . $status->id ?>"><?php echo $status->name?></div>
        </div>
        <?php
    }
    ?>

    <div class="legend_block">
        <div class="legend_block_color priority_important">Обязательно</div>
    </div>
</div>

<ul class="controll_buttons">
    <li class="controll_button">
        <div class="controll_button_icon controll_icon_edit"></div>
        <div class="controll_button_text">- <span class="controll_title">"Редактировать заявку".</span> Кнопка, для редактирования своей заявки </div>
    </li>
    <li class="controll_button">
        <div class="controll_button_icon controll_icon_trip"></div>
        <div class="controll_button_text">- <span class="controll_title">"Добавить информацию о поезде".</span> Кнопка, для добавления и изменения информации о поездке</div>
    </li>
    <li class="controll_button">
        <div class="controll_button_icon controll_icon_delete"></div>
        <div class="controll_button_text">- <span class="controll_title">"Удалить заявку".</span> Кнопка, для удаляения заявки </div>
    </li>
    <?php if(Yii::app()->user->isSecretary()):?>
        <li class="controll_button">
            <div class="controll_button_icon controll_icon_affirmation"></div>
            <div class="controll_button_text">- <span class="controll_title">"Утвердить заявку".</span> Кнопка, для утверждения заявки </div>
        </li>
        <li class="controll_button">
            <div class="controll_button_icon controll_icon_text">+</div>
            <div class="controll_button_text">- <span class="controll_title">"Показания одометра - верны".</span> Кнопка, для подтверждения правильности показаний одометра </div>
        </li>
        <li class="controll_button">
            <div class="controll_button_icon controll_icon_text">-</div>
            <div class="controll_button_text">- <span class="controll_title">"Показания спидометра - не верны".</span> Кнопка, для указания не правильности показаний одометра </div>
        </li>
    <?php endif; ?>
</ul>
